services:
  backend-user:
    container_name: backend-user
    build: ./backend/users/
    ports:
      - 8001:8001
    volumes:
      - ./backend/users/srcs:/app
    networks:
      - pingpong_net
    env_file:
      - ./env/backend-user.env
      - ./env/db-user.env
    restart: always
    depends_on:
      db-user:
        condition: service_healthy
  # backend에서 user테이블 관련 CRUD 및 status 관리를 하는 container

  backend-auth:
    container_name: backend-auth
    build: ./backend/auth/
    ports:
      - 8002:8002
    volumes:
      - ./backend/auth/srcs:/app
    networks:
      - pingpong_net
    env_file:
      - ./env/backend-auth.env
      - ./env/db-auth.env
    restart: always
    depends_on:
      db-auth:
        condition: service_healthy
  # backend에서 login / logout / join / oauth 관련한 인증 처리 container

  backend-game:
    container_name: backend-game
    build: ./backend/games/
    ports:
      - 8000:8000
    volumes:
      - ./backend/games/srcs:/app
    networks:
      - pingpong_net
    env_file:
      - ./env/backend-game.env
      - ./env/db-game.env
    restart: always
    depends_on:
      db-game:
        condition: service_healthy
  # backend에서 game 관련한 처리를 하는 container
  ##### backend container들 정의 ######

  db-user:
    container_name: db-user
    image: postgres
    expose:
      - 5432
    volumes:
      - volume-user:/var/lib/postgresql/data
    networks:
      - pingpong_net
    env_file:
      - ./env/db-user.env
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "user_db" ]
      interval: 10s
      timeout: 5s
      retries: 3
  # backend-user cotainer와 연결되며 user / friend table을 가지고 있는 db

  db-auth:
    container_name: db-auth
    image: postgres
    expose:
      - 5432
    volumes:
      - volume-auth:/var/lib/postgresql/data
    networks:
      - pingpong_net
    env_file:
      - ./env/db-auth.env
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "auth_db" ]
      interval: 10s
      timeout: 5s
      retries: 3
  # backend-auth cotainer와 연결되며 auth_user table을 가지고 있는 db

  db-game:
    container_name: db-game
    image: postgres
    expose:
      - 5432
    volumes:
      - volume-game:/var/lib/postgresql/data
    networks:
      - pingpong_net
    env_file:
      - ./env/db-game.env
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "game_db" ]
      interval: 10s
      timeout: 5s
      retries: 3
  # backend-game cotainer와 연결되며 match table을 가지고 있는 db
  ##### backend에서 db container들 정의 #####

  nginx:
    container_name: nginx
    build:
      context: nginx/
      args:
        - SSL_PUBLIC_KEY=${SSL_PUBLIC_KEY}
        - SSL_PRIVATE_KEY=${SSL_PRIVATE_KEY}
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    networks:
      - pingpong_net
    restart: always
    depends_on:
      - backend-auth
      - backend-user
      - backend-game

networks:
  pingpong_net:
    name: pingpong_net
    driver: bridge

volumes:
  volume-game:
    name: volume-game
    driver: local

  volume-auth:
    name: volume-auth
    driver: local

  volume-user:
    name: volume-user
    driver: local
